<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, April 09, 2017, 11:32 AM -->
<!-- MuClient version 5.04 -->
<!--
     XP Hotspot Timer by Ruhsbaar
-->
<muclient>
<plugin
   name="XPTimer"
   author="Ruhsbaar"
   id="2cc9f421b4a4a393d32e9cfe"
   language="Lua"
   purpose="Measure time since last visit to XP Hotspots in DiscworldMUD."
   date_written="2017-04-09 11:30:16"
   requires="5.04"
   version="1.0"
   >

</plugin>

<include name="constants.lua"/>
<aliases>
  <alias
   enabled="y"
   match="^deathtimers$"
   regexp="y"
   script="DeathTimers"
   sequence="100"
  ></alias>
  <alias
    enabled="y"
    match="^dt$"
    regexp="y"
    script="DeathTimers"
    sequence="100"
  ></alias>
  <alias
    enabled="y"
    match="^dtreset (?<target>\w+)$"
    regexp="y"
    script="SpotReset"
    sequence="100"
  ></alias>
  <alias
    enabled="y"
    match="gsdt"
    regexp="y"
    script="GroupSend"
    sequence="100"
  ></alias>
  <alias
    enabled="y"
    match="dtdebug"
    regexp="y"
    script="DebugToggle"
    sequence="100"
  ></alias>
  <alias
    enabled="y"
    match="help deathtimer"
    regexp="y"
    script="HelpFile"
    sequence="100"
  ></alias>
</aliases>
<triggers>
    <trigger
        enabled="y"
        keep_evaluating="n"
        match="^(?P<killer>[- 'A-Za-z]+) deals the death blow to\s(?P<victim>.+)\.$"
        regexp="y"
        script="DeathBlowHandler"
        name="OtherDeathBlowHandler"
        sequence="100"
    ></trigger>
    <trigger
        enabled="y"
        keep_evaluating="n"
        match="^(?P<killer>You) kill\s(?P<victim>.+)\.$"
        regexp="y"
        script="DeathBlowHandler"
        name="YouDeathBlowHandler"
        sequence="100"
    ></trigger>
</triggers>

<script>
<![CDATA[
-- Utils
function initSpot(name, display, group)
    local spot = {
        ["time"] = 0,
        ["name"] = name,
        ["display"] = display
    }

    if group then
        spot["group"] = true
    end

    return spot
end



-- Data
debug_flag = False

last_room = {
    ["name"] = "",
    ["identifier"] = ""
}

kill_timers = {
    [1] = initSpot("Delbert", "delbert"),
    [2] = initSpot("the Triad boss", "medina boss"),
    [3] = initSpot("the bandit leader", "bandit leader"),
    [4] = initSpot("Hlakket the Bartender", "hlakket"),
    [5] = initSpot("the Zoon Liar", "zoon liar"),
    [6] = initSpot("Slim Stevie", "rogues"),
    [7] = initSpot("the smuggler captain", "smuggler captain"),
    [8] = initSpot("the ceremonial guard", "cguards"),
    [9] = initSpot("the %l+ %l+ lion", "shaker lions"),
    [10] = initSpot("the %l+ student", "dojo"),
    [11] = initSpot("the %l+ grflx worker", "grflx", true),
    [12] = initSpot("the %l+ grflx workleader", "grflx", true),
    [13] = initSpot("the giant leader", "giant leader"),
}

visit_timers = {
    -- shades maze entrance
    [1] = initSpot("01bbd8b887e71314d8e358cbaf4f585391206bc4", "shades"),
    -- smugglers cove entrance
    [2] = initSpot("ebff897af2b8bb6800a9a8636143099d0714be07", "smugglers"),
    -- casino, Gumoni's room
    [3] = initSpot("11f3c9c2ccc3c66cdcaaad2a44854531275ccc52", "casino"),
    -- second floor kitchen, salt shaker
    [4] = initSpot("cb8aaf1cc79bb5e8977a6d0124791dd116eef443", "shaker"),
    -- offler crocodile pond
    [5] = initSpot("70546ec71867645ab5c51e9ce6087b75dcf4176f", "offler"),
    -- 1k parades southwest corner
    [6] = initSpot("3862c5fd0fe83f4080bdb9b94519bf8da89d5015", "parades", true),
    -- 1k parades northeast corner
    [7] = initSpot("95ede200c782fdb09239a2db85dd9f8775922f86", "parades", true),
    -- northern corner of the black market
    [8] = initSpot("f6c60dd36ed38707eb954c3a670f2f9370a79399", "black market", true),
    -- southern side of the black market
    [9] = initSpot("0ae9d8c4f2b48f4fcc4cb57fd85443399be2ecc5", "black market", true),
}



-- XPTimer
function DebugToggle(name, line, wildcards)
    debug_flag = not debug_flag
    Note("[XPTimer] Debug flag toggled to " .. tostring(debug_flag))
end

function DeathBlowHandler(name, line, wildcards)
    local killer = wildcards.killer
    local victim = wildcards.victim
    if debug_flag then
        Note("[XPTimer] Killer: " .. killer .. " | Victim: " .. victim)
    end

    for k,v in pairs(kill_timers) do
        if string.match(victim, v["name"]) then
            v["time"] = GetInfo(232)
        end
    end
end

function OnPluginBroadcast(msg, id, name, text)
  regex = '^room.info {%"identifier%":%"(%x+)%",%"name%":%"(.+)%",%"visibility%":%d,%"kind%":%"%w+%"}$'
  identifier, roomname = string.match(text, regex)

  if(identifier) then
    -- Record the last room we were in
    last_room["name"] = roomname
    last_room["identifier"] = identifier

    if debug_flag then
        Note("[XPTimer] Room Name: \"" .. roomname .. "\" Identifier: \"" .. identifier .. "\"")
    end

    -- Check it against our saved vnums
    for k,v in pairs(visit_timers) do
        if v["name"] == identifier then
            v["time"] = GetInfo(232)
        end
    end
  end
end

function SpotReset(name, line, wildcards)
    if wildcards.target == "all" then
        for k,v in pairs(kill_timers) do
            v["time"] = 0
        end
        for k,v in pairs(visit_timers) do
            v["time"] = 0
        end
    else
        for k,v in pairs(kill_timers) do
            if v["display"] == wildcards.target then
                v["time"] = GetInfo(232)
            end
        end
        for k,v in pairs(visit_timers) do
            if v["display"] == wildcards.target then
                v["time"] = GetInfo(232)
            end
        end
    end
end



-- Output
function DeathTimers()
    local current_time = GetInfo(232)
    local difference = GetInfo(232)

    function PrintTimerTable(timers)
        local groups = {}
        for index,spot in ipairs(timers) do
            if spot["group"] then
                if not groups[spot["display"]] then
                    groups[spot["display"]] = spot["time"]
                else
                    if groups[spot["display"]] < spot["time"] then
                        groups[spot["display"]] = spot["time"]
                    end
                end
            else
                if spot["time"] == 0 then
                    Note(" - (Unseen)\t" .. spot["display"])
                else
                    difference = math.floor((current_time - spot["time"]) + 0.5)
                    local mins = math.floor(difference/60)
                    if mins < 10 then
                        Note(" - (0" .. mins .. "m)\t" .. spot["display"])
                    else
                        Note(" - (" .. mins .. "m)\t" .. spot["display"])
                    end
                end
            end
        end
        for display,time in pairs(groups) do
            if time == 0 then
                Note(" - (Unseen)\t" .. display)
            else
                difference = math.floor((current_time - time) + 0.5)
                local mins = math.floor(difference/60)
                if mins < 10 then
                    Note(" - (0" .. mins .. "m)\t" .. display)
                else
                    Note(" - (" .. mins .. "m)\t" .. display)
                end
            end
        end
    end

    Note(".:: Death Timers ::.")
    PrintTimerTable(kill_timers)


    Note("\n.:: Visit Timers ::.")
    PrintTimerTable(visit_timers)
end

function GroupSend(name, line, wildcards)
    local current_time = GetInfo(232)
    local difference = GetInfo(232)

    function PrintTimerTable(timers)
        local output = ""
        local groups = {}
        for index,spot in ipairs(timers) do
            if spot["group"] then
                if not groups[spot["display"]] then
                    groups[spot["display"]] = spot["time"]
                else
                    if groups[spot["display"]] < spot["time"] then
                        groups[spot["display"]] = spot["time"]
                    end
                end
            else
                if spot["time"] == 0 then
                    output = output .. spot["display"] .. ": Unseen | "
                else
                    difference = math.floor((current_time - spot["time"]) + 0.5)
                    local mins = math.floor(difference/60)
                    output = output .. spot["display"] .. ": " .. mins .. "m | "
                end
            end
        end
        for display,time in pairs(groups) do
            if time == 0 then
                output = output .. spot["display"] .. ": Unseen | "
            else
                difference = math.floor((current_time - time) + 0.5)
                local mins = math.floor(difference/60)
                output = output .. spot["display"] .. ": " .. mins .. "m | "
            end
        end
        output = output:sub(1, output:len()-2)

        return output
    end

    -- List out death timers
    local kto = PrintTimerTable(kill_timers)

    -- List out visit timers
    local vto = PrintTimerTable(visit_timers)

    Send("group say " .. kto .. " | " .. vto)
end

function HelpFile(name, line, wildcards)
    Note("XP Hotspot Timer by Ruhsbaar")
    Note("'dt' or 'deathtimers': display a list of XP hotspot timers")
    Note("'gsdt': share the list over group chat")
    Note("'dtreset <all/target>': reset the target XP hotspot timer to zero")
    Note("'dtdebug': toggle debug mode. Useful to find NPC string or room id to add spots")
end

]]>
</script>
</muclient>
